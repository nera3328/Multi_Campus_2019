node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tensors/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 13
          }
          dim {
            size: 25
          }
        }
        tensor_content: "k\000\000\000V\000\000\000(\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000L\000\000\000O\000\000\000.\000\000\000j\000\000\000\033\000\000\000o\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000L\000\000\000\020\000\000\000hx\000\000\000m\000\000\000\006\000\000\000\034\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000L\000\000\000%\000\000\000l\000\000\000U\000\000\000E\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000P\000\000\000t\000\000\000yq\000\000\000Z\000\000\0008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000P\000\000\000t\000\000\000/\000\000\000i\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "tensors/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 13
          }
          dim {
            size: 25
          }
        }
        tensor_content: "\001\000\000\0005\000\000\000\016\000\000\000\027\000\000\0000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\013\000\000\000M\000\000\000f\000\000\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\021\000\000\000-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000<\000\000\000\024\000\000\000_\000\000\0006\000\000\000ac\000\000\000D\000\000\000p\000\000\000d\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000m\000\000\000M\000\000\000!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000<\000\000\000\024\000\000\000w\000\000\000\025\000\000\000v`\000\000\000M\000\000\000\'\000\000\000T\000\000\000+\000\000\000R\000\000\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\031\000\000\000\024\000\000\000c\000\000\000D\000\000\000p\000\000\000d\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000^\000\000\0007\000\000\000\024\000\000\000 \000\000\000\"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "tensors/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 13
          }
          dim {
            size: 25
          }
        }
        tensor_content: "5\000\000\000\016\000\000\000\027\000\000\0000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\000\000\000M\000\000\000f\000\000\000vac\000\000\000D\000\000\000p\000\000\000d\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000m\000\000\000M\000\000\000!\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000<\000\000\000\024\000\000\000w\000\000\000\025\000\000\000v`\000\000\000M\000\000\000\'\000\000\000T\000\000\000+\000\000\000R\000\000\000v\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\000\000\000\024\000\000\000c\000\000\000D\000\000\000p\000\000\000d
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 13
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 64
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "OneShotIterator"
  op: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dataset_factory"
    value {
      func {
        name: "_make_dataset_IvTZ5sHoH44"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
}
node {
  name: "embedding/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "z\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "embedding/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1549193412065506
      }
    }
  }
}
node {
  name: "embedding/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1549193412065506
      }
    }
  }
}
node {
  name: "embedding/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "embedding/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "embedding/Initializer/random_uniform/sub"
  op: "Sub"
  input: "embedding/Initializer/random_uniform/max"
  input: "embedding/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "embedding/Initializer/random_uniform/mul"
  op: "Mul"
  input: "embedding/Initializer/random_uniform/RandomUniform"
  input: "embedding/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "embedding/Initializer/random_uniform"
  op: "Add"
  input: "embedding/Initializer/random_uniform/mul"
  input: "embedding/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "embedding"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 122
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "embedding/Assign"
  op: "Assign"
  input: "embedding"
  input: "embedding/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "embedding/read"
  op: "Identity"
  input: "embedding"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "embedding_lookup/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "embedding_lookup"
  op: "GatherV2"
  input: "embedding/read"
  input: "IteratorGetNext"
  input: "embedding_lookup/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "embedding_lookup/Identity"
  op: "Identity"
  input: "embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "embedding_lookup_1/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "embedding_lookup_1"
  op: "GatherV2"
  input: "embedding/read"
  input: "IteratorGetNext:1"
  input: "embedding_lookup_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "embedding_lookup_1/Identity"
  op: "Identity"
  input: "embedding_lookup_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/DropoutWrapperInit/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder_scope/DropoutWrapperInit/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder_scope/DropoutWrapperInit/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "encoder_scope/DropoutWrapperInit_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder_scope/DropoutWrapperInit_1/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder_scope/DropoutWrapperInit_1/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "encoder_scope/DropoutWrapperInit_2/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder_scope/DropoutWrapperInit_2/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder_scope/DropoutWrapperInit_2/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/range"
  op: "Range"
  input: "encoder_scope/rnn/range/start"
  input: "encoder_scope/rnn/Rank"
  input: "encoder_scope/rnn/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/concat"
  op: "ConcatV2"
  input: "encoder_scope/rnn/concat/values_0"
  input: "encoder_scope/rnn/range"
  input: "encoder_scope/rnn/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/transpose"
  op: "Transpose"
  input: "embedding_lookup/Identity"
  input: "encoder_scope/rnn/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder_scope/rnn/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/strided_slice"
  op: "StridedSlice"
  input: "encoder_scope/rnn/Shape"
  input: "encoder_scope/rnn/strided_slice/stack"
  input: "encoder_scope/rnn/strided_slice/stack_1"
  input: "encoder_scope/rnn/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "encoder_scope/rnn/strided_slice"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/ExpandDims"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/Const"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/concat"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "encoder_scope/rnn/strided_slice"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "encoder_scope/rnn/strided_slice"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/ExpandDims_2"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/Const_2"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/concat_1"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "encoder_scope/rnn/strided_slice"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "encoder_scope/rnn/strided_slice"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/Const"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/concat"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "encoder_scope/rnn/strided_slice"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "encoder_scope/rnn/strided_slice"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims_2"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/Const_2"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/concat_1"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "encoder_scope/rnn/strided_slice"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "encoder_scope/rnn/strided_slice"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/ExpandDims"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/Const"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/concat"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "encoder_scope/rnn/strided_slice"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "encoder_scope/rnn/strided_slice"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/ExpandDims_2"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/Const_2"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/concat_1"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "encoder_scope/rnn/strided_slice"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/Shape_1"
  op: "Shape"
  input: "encoder_scope/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder_scope/rnn/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/strided_slice_1"
  op: "StridedSlice"
  input: "encoder_scope/rnn/Shape_1"
  input: "encoder_scope/rnn/strided_slice_1/stack"
  input: "encoder_scope/rnn/strided_slice_1/stack_1"
  input: "encoder_scope/rnn/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder_scope/rnn/Shape_2"
  op: "Shape"
  input: "encoder_scope/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder_scope/rnn/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/strided_slice_2"
  op: "StridedSlice"
  input: "encoder_scope/rnn/Shape_2"
  input: "encoder_scope/rnn/strided_slice_2/stack"
  input: "encoder_scope/rnn/strided_slice_2/stack_1"
  input: "encoder_scope/rnn/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder_scope/rnn/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/ExpandDims"
  op: "ExpandDims"
  input: "encoder_scope/rnn/strided_slice_2"
  input: "encoder_scope/rnn/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/concat_1"
  op: "ConcatV2"
  input: "encoder_scope/rnn/ExpandDims"
  input: "encoder_scope/rnn/Const"
  input: "encoder_scope/rnn/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/zeros"
  op: "Fill"
  input: "encoder_scope/rnn/concat_1"
  input: "encoder_scope/rnn/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder_scope/rnn/time"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/TensorArray"
  op: "TensorArrayV3"
  input: "encoder_scope/rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder_scope/rnn/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "encoder_scope/rnn/TensorArray_1"
  op: "TensorArrayV3"
  input: "encoder_scope/rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder_scope/rnn/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "encoder_scope/rnn/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder_scope/rnn/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "encoder_scope/rnn/TensorArrayUnstack/Shape"
  input: "encoder_scope/rnn/TensorArrayUnstack/strided_slice/stack"
  input: "encoder_scope/rnn/TensorArrayUnstack/strided_slice/stack_1"
  input: "encoder_scope/rnn/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder_scope/rnn/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/TensorArrayUnstack/range"
  op: "Range"
  input: "encoder_scope/rnn/TensorArrayUnstack/range/start"
  input: "encoder_scope/rnn/TensorArrayUnstack/strided_slice"
  input: "encoder_scope/rnn/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "encoder_scope/rnn/TensorArray_1"
  input: "encoder_scope/rnn/TensorArrayUnstack/range"
  input: "encoder_scope/rnn/transpose"
  input: "encoder_scope/rnn/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/Maximum/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/Maximum"
  op: "Maximum"
  input: "encoder_scope/rnn/Maximum/x"
  input: "encoder_scope/rnn/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/Minimum"
  op: "Minimum"
  input: "encoder_scope/rnn/strided_slice_1"
  input: "encoder_scope/rnn/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/iteration_counter"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Enter"
  op: "Enter"
  input: "encoder_scope/rnn/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Enter_1"
  op: "Enter"
  input: "encoder_scope/rnn/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Enter_2"
  op: "Enter"
  input: "encoder_scope/rnn/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Enter_3"
  op: "Enter"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Enter_4"
  op: "Enter"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState/BasicLSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Enter_5"
  op: "Enter"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Enter_6"
  op: "Enter"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_1/BasicLSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Enter_7"
  op: "Enter"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Enter_8"
  op: "Enter"
  input: "encoder_scope/rnn/MultiRNNCellZeroState/DropoutWrapperZeroState_2/BasicLSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Merge"
  op: "Merge"
  input: "encoder_scope/rnn/while/Enter"
  input: "encoder_scope/rnn/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Merge_1"
  op: "Merge"
  input: "encoder_scope/rnn/while/Enter_1"
  input: "encoder_scope/rnn/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Merge_2"
  op: "Merge"
  input: "encoder_scope/rnn/while/Enter_2"
  input: "encoder_scope/rnn/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Merge_3"
  op: "Merge"
  input: "encoder_scope/rnn/while/Enter_3"
  input: "encoder_scope/rnn/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Merge_4"
  op: "Merge"
  input: "encoder_scope/rnn/while/Enter_4"
  input: "encoder_scope/rnn/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Merge_5"
  op: "Merge"
  input: "encoder_scope/rnn/while/Enter_5"
  input: "encoder_scope/rnn/while/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Merge_6"
  op: "Merge"
  input: "encoder_scope/rnn/while/Enter_6"
  input: "encoder_scope/rnn/while/NextIteration_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Merge_7"
  op: "Merge"
  input: "encoder_scope/rnn/while/Enter_7"
  input: "encoder_scope/rnn/while/NextIteration_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Merge_8"
  op: "Merge"
  input: "encoder_scope/rnn/while/Enter_8"
  input: "encoder_scope/rnn/while/NextIteration_8"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Less"
  op: "Less"
  input: "encoder_scope/rnn/while/Merge"
  input: "encoder_scope/rnn/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Less/Enter"
  op: "Enter"
  input: "encoder_scope/rnn/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Less_1"
  op: "Less"
  input: "encoder_scope/rnn/while/Merge_1"
  input: "encoder_scope/rnn/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Less_1/Enter"
  op: "Enter"
  input: "encoder_scope/rnn/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder_scope/rnn/while/LogicalAnd"
  op: "LogicalAnd"
  input: "encoder_scope/rnn/while/Less"
  input: "encoder_scope/rnn/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/LoopCond"
  op: "LoopCond"
  input: "encoder_scope/rnn/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Switch"
  op: "Switch"
  input: "encoder_scope/rnn/while/Merge"
  input: "encoder_scope/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Switch_1"
  op: "Switch"
  input: "encoder_scope/rnn/while/Merge_1"
  input: "encoder_scope/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Switch_2"
  op: "Switch"
  input: "encoder_scope/rnn/while/Merge_2"
  input: "encoder_scope/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Switch_3"
  op: "Switch"
  input: "encoder_scope/rnn/while/Merge_3"
  input: "encoder_scope/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Switch_4"
  op: "Switch"
  input: "encoder_scope/rnn/while/Merge_4"
  input: "encoder_scope/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Switch_5"
  op: "Switch"
  input: "encoder_scope/rnn/while/Merge_5"
  input: "encoder_scope/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/Merge_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Switch_6"
  op: "Switch"
  input: "encoder_scope/rnn/while/Merge_6"
  input: "encoder_scope/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/Merge_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Switch_7"
  op: "Switch"
  input: "encoder_scope/rnn/while/Merge_7"
  input: "encoder_scope/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/Merge_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Switch_8"
  op: "Switch"
  input: "encoder_scope/rnn/while/Merge_8"
  input: "encoder_scope/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/Merge_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Identity"
  op: "Identity"
  input: "encoder_scope/rnn/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Identity_1"
  op: "Identity"
  input: "encoder_scope/rnn/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Identity_2"
  op: "Identity"
  input: "encoder_scope/rnn/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Identity_3"
  op: "Identity"
  input: "encoder_scope/rnn/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Identity_4"
  op: "Identity"
  input: "encoder_scope/rnn/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Identity_5"
  op: "Identity"
  input: "encoder_scope/rnn/while/Switch_5:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Identity_6"
  op: "Identity"
  input: "encoder_scope/rnn/while/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Identity_7"
  op: "Identity"
  input: "encoder_scope/rnn/while/Switch_7:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Identity_8"
  op: "Identity"
  input: "encoder_scope/rnn/while/Switch_8:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/add/y"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/add"
  op: "Add"
  input: "encoder_scope/rnn/while/Identity"
  input: "encoder_scope/rnn/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "encoder_scope/rnn/while/TensorArrayReadV3/Enter"
  input: "encoder_scope/rnn/while/Identity_1"
  input: "encoder_scope/rnn/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "encoder_scope/rnn/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder_scope/rnn/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "encoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0883883461356163
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0883883461356163
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/max"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/RandomUniform"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform"
  op: "Add"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/mul"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Assign"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Read/Identity"
  op: "Identity"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Assign"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Read/Identity"
  op: "Identity"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Const"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat/axis"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat"
  op: "ConcatV2"
  input: "encoder_scope/rnn/while/TensorArrayReadV3"
  input: "encoder_scope/rnn/while/Identity_4"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul"
  op: "MatMul"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter"
  op: "Enter"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd"
  op: "BiasAdd"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter"
  op: "Enter"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Const_1"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split"
  op: "Split"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Const"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Const_2"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add"
  op: "Add"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split:2"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid"
  op: "Sigmoid"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul"
  op: "Mul"
  input: "encoder_scope/rnn/while/Identity_3"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_1"
  op: "Sigmoid"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh"
  op: "Tanh"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1"
  op: "Mul"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_1"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1"
  op: "Add"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh_1"
  op: "Tanh"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_2"
  op: "Sigmoid"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2"
  op: "Mul"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh_1"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/rate"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/sub/x"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/sub"
  op: "Sub"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/sub/x"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform/min"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform/max"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform/sub"
  op: "Sub"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform/max"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform/mul"
  op: "Mul"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform/RandomUniform"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform"
  op: "Add"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform/mul"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/add"
  op: "Add"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/sub"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/Floor"
  op: "Floor"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv"
  op: "RealDiv"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul"
  op: "Mul"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0883883461356163
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0883883461356163
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/max"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/RandomUniform"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/mul"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Assign"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Read/Identity"
  op: "Identity"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Assign"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Read/Identity"
  op: "Identity"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Const"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat/axis"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat"
  op: "ConcatV2"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul"
  input: "encoder_scope/rnn/while/Identity_6"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul"
  op: "MatMul"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter"
  op: "Enter"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd"
  op: "BiasAdd"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter"
  op: "Enter"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Const_1"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split"
  op: "Split"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Const"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Const_2"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add"
  op: "Add"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split:2"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid"
  op: "Sigmoid"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul"
  op: "Mul"
  input: "encoder_scope/rnn/while/Identity_5"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_1"
  op: "Sigmoid"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh"
  op: "Tanh"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1"
  op: "Mul"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_1"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1"
  op: "Add"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh_1"
  op: "Tanh"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_2"
  op: "Sigmoid"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2"
  op: "Mul"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh_1"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/rate"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/sub/x"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/sub"
  op: "Sub"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/sub/x"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform/min"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform/max"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform/sub"
  op: "Sub"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform/max"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform/mul"
  op: "Mul"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform/RandomUniform"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform"
  op: "Add"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform/mul"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/add"
  op: "Add"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/sub"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/Floor"
  op: "Floor"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv"
  op: "RealDiv"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul"
  op: "Mul"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0883883461356163
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0883883461356163
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/max"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/RandomUniform"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform"
  op: "Add"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/mul"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Assign"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Read/Identity"
  op: "Identity"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Assign"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Read/Identity"
  op: "Identity"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Const"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat/axis"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat"
  op: "ConcatV2"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul"
  input: "encoder_scope/rnn/while/Identity_8"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul"
  op: "MatMul"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter"
  op: "Enter"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd"
  op: "BiasAdd"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter"
  op: "Enter"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Const_1"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split"
  op: "Split"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Const"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Const_2"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add"
  op: "Add"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split:2"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid"
  op: "Sigmoid"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul"
  op: "Mul"
  input: "encoder_scope/rnn/while/Identity_7"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_1"
  op: "Sigmoid"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh"
  op: "Tanh"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1"
  op: "Mul"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_1"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1"
  op: "Add"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh_1"
  op: "Tanh"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_2"
  op: "Sigmoid"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2"
  op: "Mul"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh_1"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/rate"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/sub/x"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/sub"
  op: "Sub"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/sub/x"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform/min"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform/max"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform/sub"
  op: "Sub"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform/max"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform/mul"
  op: "Mul"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform/RandomUniform"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform"
  op: "Add"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform/mul"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/add"
  op: "Add"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/sub"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/Floor"
  op: "Floor"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv"
  op: "RealDiv"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul"
  op: "Mul"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "encoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encoder_scope/rnn/while/Identity_1"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul"
  input: "encoder_scope/rnn/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "encoder_scope/rnn/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder_scope/rnn/while/add_1/y"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/add_1"
  op: "Add"
  input: "encoder_scope/rnn/while/Identity_1"
  input: "encoder_scope/rnn/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/NextIteration"
  op: "NextIteration"
  input: "encoder_scope/rnn/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/NextIteration_1"
  op: "NextIteration"
  input: "encoder_scope/rnn/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/NextIteration_2"
  op: "NextIteration"
  input: "encoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/NextIteration_3"
  op: "NextIteration"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/NextIteration_4"
  op: "NextIteration"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/NextIteration_5"
  op: "NextIteration"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/NextIteration_6"
  op: "NextIteration"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/NextIteration_7"
  op: "NextIteration"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/NextIteration_8"
  op: "NextIteration"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Exit"
  op: "Exit"
  input: "encoder_scope/rnn/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Exit_1"
  op: "Exit"
  input: "encoder_scope/rnn/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Exit_2"
  op: "Exit"
  input: "encoder_scope/rnn/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Exit_3"
  op: "Exit"
  input: "encoder_scope/rnn/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Exit_4"
  op: "Exit"
  input: "encoder_scope/rnn/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Exit_5"
  op: "Exit"
  input: "encoder_scope/rnn/while/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Exit_6"
  op: "Exit"
  input: "encoder_scope/rnn/while/Switch_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Exit_7"
  op: "Exit"
  input: "encoder_scope/rnn/while/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/while/Exit_8"
  op: "Exit"
  input: "encoder_scope/rnn/while/Switch_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "encoder_scope/rnn/TensorArray"
  input: "encoder_scope/rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/TensorArrayStack/range"
  op: "Range"
  input: "encoder_scope/rnn/TensorArrayStack/range/start"
  input: "encoder_scope/rnn/TensorArrayStack/TensorArraySizeV3"
  input: "encoder_scope/rnn/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "encoder_scope/rnn/TensorArray"
  input: "encoder_scope/rnn/TensorArrayStack/range"
  input: "encoder_scope/rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/Rank_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/range_1"
  op: "Range"
  input: "encoder_scope/rnn/range_1/start"
  input: "encoder_scope/rnn/Rank_1"
  input: "encoder_scope/rnn/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/concat_2/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/concat_2"
  op: "ConcatV2"
  input: "encoder_scope/rnn/concat_2/values_0"
  input: "encoder_scope/rnn/range_1"
  input: "encoder_scope/rnn/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/transpose_1"
  op: "Transpose"
  input: "encoder_scope/rnn/TensorArrayStack/TensorArrayGatherV3"
  input: "encoder_scope/rnn/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/DropoutWrapperInit/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder_scope/DropoutWrapperInit/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder_scope/DropoutWrapperInit/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "decoder_scope/DropoutWrapperInit_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder_scope/DropoutWrapperInit_1/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder_scope/DropoutWrapperInit_1/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "decoder_scope/DropoutWrapperInit_2/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder_scope/DropoutWrapperInit_2/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder_scope/DropoutWrapperInit_2/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/range"
  op: "Range"
  input: "decoder_scope/rnn/range/start"
  input: "decoder_scope/rnn/Rank"
  input: "decoder_scope/rnn/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/concat"
  op: "ConcatV2"
  input: "decoder_scope/rnn/concat/values_0"
  input: "decoder_scope/rnn/range"
  input: "decoder_scope/rnn/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/transpose"
  op: "Transpose"
  input: "embedding_lookup_1/Identity"
  input: "decoder_scope/rnn/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_scope/rnn/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/strided_slice"
  op: "StridedSlice"
  input: "decoder_scope/rnn/Shape"
  input: "decoder_scope/rnn/strided_slice/stack"
  input: "decoder_scope/rnn/strided_slice/stack_1"
  input: "decoder_scope/rnn/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder_scope/rnn/Shape_1"
  op: "Shape"
  input: "decoder_scope/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_scope/rnn/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/strided_slice_1"
  op: "StridedSlice"
  input: "decoder_scope/rnn/Shape_1"
  input: "decoder_scope/rnn/strided_slice_1/stack"
  input: "decoder_scope/rnn/strided_slice_1/stack_1"
  input: "decoder_scope/rnn/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder_scope/rnn/Shape_2"
  op: "Shape"
  input: "decoder_scope/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_scope/rnn/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/strided_slice_2"
  op: "StridedSlice"
  input: "decoder_scope/rnn/Shape_2"
  input: "decoder_scope/rnn/strided_slice_2/stack"
  input: "decoder_scope/rnn/strided_slice_2/stack_1"
  input: "decoder_scope/rnn/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder_scope/rnn/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/ExpandDims"
  op: "ExpandDims"
  input: "decoder_scope/rnn/strided_slice_2"
  input: "decoder_scope/rnn/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/concat_1"
  op: "ConcatV2"
  input: "decoder_scope/rnn/ExpandDims"
  input: "decoder_scope/rnn/Const"
  input: "decoder_scope/rnn/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/zeros"
  op: "Fill"
  input: "decoder_scope/rnn/concat_1"
  input: "decoder_scope/rnn/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_scope/rnn/time"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/TensorArray"
  op: "TensorArrayV3"
  input: "decoder_scope/rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "decoder_scope/rnn/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "decoder_scope/rnn/TensorArray_1"
  op: "TensorArrayV3"
  input: "decoder_scope/rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "decoder_scope/rnn/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "decoder_scope/rnn/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_scope/rnn/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "decoder_scope/rnn/TensorArrayUnstack/Shape"
  input: "decoder_scope/rnn/TensorArrayUnstack/strided_slice/stack"
  input: "decoder_scope/rnn/TensorArrayUnstack/strided_slice/stack_1"
  input: "decoder_scope/rnn/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder_scope/rnn/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/TensorArrayUnstack/range"
  op: "Range"
  input: "decoder_scope/rnn/TensorArrayUnstack/range/start"
  input: "decoder_scope/rnn/TensorArrayUnstack/strided_slice"
  input: "decoder_scope/rnn/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "decoder_scope/rnn/TensorArray_1"
  input: "decoder_scope/rnn/TensorArrayUnstack/range"
  input: "decoder_scope/rnn/transpose"
  input: "decoder_scope/rnn/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/Maximum/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/Maximum"
  op: "Maximum"
  input: "decoder_scope/rnn/Maximum/x"
  input: "decoder_scope/rnn/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/Minimum"
  op: "Minimum"
  input: "decoder_scope/rnn/strided_slice_1"
  input: "decoder_scope/rnn/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/iteration_counter"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Enter"
  op: "Enter"
  input: "decoder_scope/rnn/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Enter_1"
  op: "Enter"
  input: "decoder_scope/rnn/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Enter_2"
  op: "Enter"
  input: "decoder_scope/rnn/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Enter_3"
  op: "Enter"
  input: "encoder_scope/rnn/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Enter_4"
  op: "Enter"
  input: "encoder_scope/rnn/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Enter_5"
  op: "Enter"
  input: "encoder_scope/rnn/while/Exit_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Enter_6"
  op: "Enter"
  input: "encoder_scope/rnn/while/Exit_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Enter_7"
  op: "Enter"
  input: "encoder_scope/rnn/while/Exit_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Enter_8"
  op: "Enter"
  input: "encoder_scope/rnn/while/Exit_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Merge"
  op: "Merge"
  input: "decoder_scope/rnn/while/Enter"
  input: "decoder_scope/rnn/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Merge_1"
  op: "Merge"
  input: "decoder_scope/rnn/while/Enter_1"
  input: "decoder_scope/rnn/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Merge_2"
  op: "Merge"
  input: "decoder_scope/rnn/while/Enter_2"
  input: "decoder_scope/rnn/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Merge_3"
  op: "Merge"
  input: "decoder_scope/rnn/while/Enter_3"
  input: "decoder_scope/rnn/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Merge_4"
  op: "Merge"
  input: "decoder_scope/rnn/while/Enter_4"
  input: "decoder_scope/rnn/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Merge_5"
  op: "Merge"
  input: "decoder_scope/rnn/while/Enter_5"
  input: "decoder_scope/rnn/while/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Merge_6"
  op: "Merge"
  input: "decoder_scope/rnn/while/Enter_6"
  input: "decoder_scope/rnn/while/NextIteration_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Merge_7"
  op: "Merge"
  input: "decoder_scope/rnn/while/Enter_7"
  input: "decoder_scope/rnn/while/NextIteration_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Merge_8"
  op: "Merge"
  input: "decoder_scope/rnn/while/Enter_8"
  input: "decoder_scope/rnn/while/NextIteration_8"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Less"
  op: "Less"
  input: "decoder_scope/rnn/while/Merge"
  input: "decoder_scope/rnn/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Less/Enter"
  op: "Enter"
  input: "decoder_scope/rnn/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Less_1"
  op: "Less"
  input: "decoder_scope/rnn/while/Merge_1"
  input: "decoder_scope/rnn/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Less_1/Enter"
  op: "Enter"
  input: "decoder_scope/rnn/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder_scope/rnn/while/LogicalAnd"
  op: "LogicalAnd"
  input: "decoder_scope/rnn/while/Less"
  input: "decoder_scope/rnn/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/LoopCond"
  op: "LoopCond"
  input: "decoder_scope/rnn/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Switch"
  op: "Switch"
  input: "decoder_scope/rnn/while/Merge"
  input: "decoder_scope/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Switch_1"
  op: "Switch"
  input: "decoder_scope/rnn/while/Merge_1"
  input: "decoder_scope/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Switch_2"
  op: "Switch"
  input: "decoder_scope/rnn/while/Merge_2"
  input: "decoder_scope/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Switch_3"
  op: "Switch"
  input: "decoder_scope/rnn/while/Merge_3"
  input: "decoder_scope/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Switch_4"
  op: "Switch"
  input: "decoder_scope/rnn/while/Merge_4"
  input: "decoder_scope/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Switch_5"
  op: "Switch"
  input: "decoder_scope/rnn/while/Merge_5"
  input: "decoder_scope/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/Merge_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Switch_6"
  op: "Switch"
  input: "decoder_scope/rnn/while/Merge_6"
  input: "decoder_scope/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/Merge_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Switch_7"
  op: "Switch"
  input: "decoder_scope/rnn/while/Merge_7"
  input: "decoder_scope/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/Merge_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Switch_8"
  op: "Switch"
  input: "decoder_scope/rnn/while/Merge_8"
  input: "decoder_scope/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/Merge_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Identity"
  op: "Identity"
  input: "decoder_scope/rnn/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Identity_1"
  op: "Identity"
  input: "decoder_scope/rnn/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Identity_2"
  op: "Identity"
  input: "decoder_scope/rnn/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Identity_3"
  op: "Identity"
  input: "decoder_scope/rnn/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Identity_4"
  op: "Identity"
  input: "decoder_scope/rnn/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Identity_5"
  op: "Identity"
  input: "decoder_scope/rnn/while/Switch_5:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Identity_6"
  op: "Identity"
  input: "decoder_scope/rnn/while/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Identity_7"
  op: "Identity"
  input: "decoder_scope/rnn/while/Switch_7:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Identity_8"
  op: "Identity"
  input: "decoder_scope/rnn/while/Switch_8:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/add/y"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/add"
  op: "Add"
  input: "decoder_scope/rnn/while/Identity"
  input: "decoder_scope/rnn/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "decoder_scope/rnn/while/TensorArrayReadV3/Enter"
  input: "decoder_scope/rnn/while/Identity_1"
  input: "decoder_scope/rnn/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "decoder_scope/rnn/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder_scope/rnn/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "decoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0883883461356163
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0883883461356163
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/max"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/RandomUniform"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform"
  op: "Add"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/mul"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Assign"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Read/Identity"
  op: "Identity"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Assign"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Read/Identity"
  op: "Identity"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Const"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat/axis"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat"
  op: "ConcatV2"
  input: "decoder_scope/rnn/while/TensorArrayReadV3"
  input: "decoder_scope/rnn/while/Identity_4"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul"
  op: "MatMul"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter"
  op: "Enter"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd"
  op: "BiasAdd"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter"
  op: "Enter"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Const_1"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split"
  op: "Split"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Const"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Const_2"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add"
  op: "Add"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split:2"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid"
  op: "Sigmoid"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul"
  op: "Mul"
  input: "decoder_scope/rnn/while/Identity_3"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_1"
  op: "Sigmoid"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh"
  op: "Tanh"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1"
  op: "Mul"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_1"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1"
  op: "Add"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh_1"
  op: "Tanh"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_2"
  op: "Sigmoid"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2"
  op: "Mul"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh_1"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/rate"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/sub/x"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/sub"
  op: "Sub"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/sub/x"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform/min"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform/max"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform/sub"
  op: "Sub"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform/max"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform/mul"
  op: "Mul"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform/RandomUniform"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform"
  op: "Add"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform/mul"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/add"
  op: "Add"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/sub"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/Floor"
  op: "Floor"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv"
  op: "RealDiv"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul"
  op: "Mul"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0883883461356163
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0883883461356163
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/max"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/RandomUniform"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/mul"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Assign"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Read/Identity"
  op: "Identity"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Assign"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Read/Identity"
  op: "Identity"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Const"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat/axis"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat"
  op: "ConcatV2"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul"
  input: "decoder_scope/rnn/while/Identity_6"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul"
  op: "MatMul"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter"
  op: "Enter"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd"
  op: "BiasAdd"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter"
  op: "Enter"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Const_1"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split"
  op: "Split"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Const"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Const_2"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add"
  op: "Add"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split:2"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid"
  op: "Sigmoid"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul"
  op: "Mul"
  input: "decoder_scope/rnn/while/Identity_5"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_1"
  op: "Sigmoid"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh"
  op: "Tanh"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1"
  op: "Mul"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_1"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1"
  op: "Add"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh_1"
  op: "Tanh"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_2"
  op: "Sigmoid"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2"
  op: "Mul"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh_1"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/rate"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/sub/x"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/sub"
  op: "Sub"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/sub/x"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform/min"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform/max"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform/sub"
  op: "Sub"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform/max"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform/mul"
  op: "Mul"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform/RandomUniform"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform"
  op: "Add"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform/mul"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/add"
  op: "Add"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/sub"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/Floor"
  op: "Floor"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv"
  op: "RealDiv"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul"
  op: "Mul"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0883883461356163
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0883883461356163
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/max"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/RandomUniform"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform"
  op: "Add"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/mul"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Assign"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Read/Identity"
  op: "Identity"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Assign"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Read/Identity"
  op: "Identity"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Const"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat/axis"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat"
  op: "ConcatV2"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul"
  input: "decoder_scope/rnn/while/Identity_8"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul"
  op: "MatMul"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter"
  op: "Enter"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd"
  op: "BiasAdd"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter"
  op: "Enter"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Const_1"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split"
  op: "Split"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Const"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Const_2"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add"
  op: "Add"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split:2"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid"
  op: "Sigmoid"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul"
  op: "Mul"
  input: "decoder_scope/rnn/while/Identity_7"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_1"
  op: "Sigmoid"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh"
  op: "Tanh"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1"
  op: "Mul"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_1"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1"
  op: "Add"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh_1"
  op: "Tanh"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_2"
  op: "Sigmoid"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2"
  op: "Mul"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh_1"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/rate"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/sub/x"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/sub"
  op: "Sub"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/sub/x"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform/min"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform/max"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform/sub"
  op: "Sub"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform/max"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform/mul"
  op: "Mul"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform/RandomUniform"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform"
  op: "Add"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform/mul"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/add"
  op: "Add"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/sub"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/Floor"
  op: "Floor"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv"
  op: "RealDiv"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul"
  op: "Mul"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "decoder_scope/rnn/while/Identity_1"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul"
  input: "decoder_scope/rnn/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "decoder_scope/rnn/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder_scope/rnn/while/add_1/y"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/add_1"
  op: "Add"
  input: "decoder_scope/rnn/while/Identity_1"
  input: "decoder_scope/rnn/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/NextIteration"
  op: "NextIteration"
  input: "decoder_scope/rnn/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/NextIteration_1"
  op: "NextIteration"
  input: "decoder_scope/rnn/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/NextIteration_2"
  op: "NextIteration"
  input: "decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/NextIteration_3"
  op: "NextIteration"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/NextIteration_4"
  op: "NextIteration"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/NextIteration_5"
  op: "NextIteration"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/NextIteration_6"
  op: "NextIteration"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/NextIteration_7"
  op: "NextIteration"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/NextIteration_8"
  op: "NextIteration"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Exit"
  op: "Exit"
  input: "decoder_scope/rnn/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Exit_1"
  op: "Exit"
  input: "decoder_scope/rnn/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Exit_2"
  op: "Exit"
  input: "decoder_scope/rnn/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Exit_3"
  op: "Exit"
  input: "decoder_scope/rnn/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Exit_4"
  op: "Exit"
  input: "decoder_scope/rnn/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Exit_5"
  op: "Exit"
  input: "decoder_scope/rnn/while/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Exit_6"
  op: "Exit"
  input: "decoder_scope/rnn/while/Switch_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Exit_7"
  op: "Exit"
  input: "decoder_scope/rnn/while/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/while/Exit_8"
  op: "Exit"
  input: "decoder_scope/rnn/while/Switch_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "decoder_scope/rnn/TensorArray"
  input: "decoder_scope/rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/TensorArrayStack/range"
  op: "Range"
  input: "decoder_scope/rnn/TensorArrayStack/range/start"
  input: "decoder_scope/rnn/TensorArrayStack/TensorArraySizeV3"
  input: "decoder_scope/rnn/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "decoder_scope/rnn/TensorArray"
  input: "decoder_scope/rnn/TensorArrayStack/range"
  input: "decoder_scope/rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/Rank_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/range_1"
  op: "Range"
  input: "decoder_scope/rnn/range_1/start"
  input: "decoder_scope/rnn/Rank_1"
  input: "decoder_scope/rnn/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/concat_2/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/concat_2"
  op: "ConcatV2"
  input: "decoder_scope/rnn/concat_2/values_0"
  input: "decoder_scope/rnn/range_1"
  input: "decoder_scope/rnn/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/transpose_1"
  op: "Transpose"
  input: "decoder_scope/rnn/TensorArrayStack/TensorArrayGatherV3"
  input: "decoder_scope/rnn/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000z\000\000\000"
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1549193412065506
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1549193412065506
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dense/kernel/Initializer/random_uniform/max"
  input: "dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dense/kernel/Initializer/random_uniform/RandomUniform"
  input: "dense/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dense/kernel/Initializer/random_uniform/mul"
  input: "dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 122
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/kernel/Assign"
  op: "Assign"
  input: "dense/kernel"
  input: "dense/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/kernel/read"
  op: "Identity"
  input: "dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
}
node {
  name: "dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 122
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 122
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/bias/Assign"
  op: "Assign"
  input: "dense/bias"
  input: "dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/bias/read"
  op: "Identity"
  input: "dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/axes"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dense/Tensordot/free"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense/Tensordot/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense/Tensordot/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/GatherV2"
  op: "GatherV2"
  input: "dense/Tensordot/Shape"
  input: "dense/Tensordot/free"
  input: "dense/Tensordot/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/GatherV2_1"
  op: "GatherV2"
  input: "dense/Tensordot/Shape"
  input: "dense/Tensordot/axes"
  input: "dense/Tensordot/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/Prod"
  op: "Prod"
  input: "dense/Tensordot/GatherV2"
  input: "dense/Tensordot/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dense/Tensordot/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/Prod_1"
  op: "Prod"
  input: "dense/Tensordot/GatherV2_1"
  input: "dense/Tensordot/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dense/Tensordot/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/concat"
  op: "ConcatV2"
  input: "dense/Tensordot/free"
  input: "dense/Tensordot/axes"
  input: "dense/Tensordot/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/stack"
  op: "Pack"
  input: "dense/Tensordot/Prod"
  input: "dense/Tensordot/Prod_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dense/Tensordot/transpose"
  op: "Transpose"
  input: "decoder_scope/rnn/transpose_1"
  input: "dense/Tensordot/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/Reshape"
  op: "Reshape"
  input: "dense/Tensordot/transpose"
  input: "dense/Tensordot/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/transpose_1/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense/Tensordot/transpose_1"
  op: "Transpose"
  input: "dense/kernel/read"
  input: "dense/Tensordot/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000z\000\000\000"
      }
    }
  }
}
node {
  name: "dense/Tensordot/Reshape_1"
  op: "Reshape"
  input: "dense/Tensordot/transpose_1"
  input: "dense/Tensordot/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/MatMul"
  op: "MatMul"
  input: "dense/Tensordot/Reshape"
  input: "dense/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense/Tensordot/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 122
      }
    }
  }
}
node {
  name: "dense/Tensordot/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/concat_1"
  op: "ConcatV2"
  input: "dense/Tensordot/GatherV2"
  input: "dense/Tensordot/Const_2"
  input: "dense/Tensordot/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot"
  op: "Reshape"
  input: "dense/Tensordot/MatMul"
  input: "dense/Tensordot/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
}
node {
  name: "dense/BiasAdd"
  op: "BiasAdd"
  input: "dense/Tensordot"
  input: "dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "ArgMax/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "ArgMax"
  op: "ArgMax"
  input: "dense/BiasAdd"
  input: "ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "one_hot/on_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "one_hot/off_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "one_hot/depth"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 122
      }
    }
  }
}
node {
  name: "one_hot"
  op: "OneHot"
  input: "IteratorGetNext:2"
  input: "one_hot/depth"
  input: "one_hot/on_value"
  input: "one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/Shape"
  op: "Shape"
  input: "dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/Rank_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/Shape_1"
  op: "Shape"
  input: "dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/Sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/Sub"
  op: "Sub"
  input: "softmax_cross_entropy_with_logits/Rank_1"
  input: "softmax_cross_entropy_with_logits/Sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/Slice/begin"
  op: "Pack"
  input: "softmax_cross_entropy_with_logits/Sub"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/Slice"
  op: "Slice"
  input: "softmax_cross_entropy_with_logits/Shape_1"
  input: "softmax_cross_entropy_with_logits/Slice/begin"
  input: "softmax_cross_entropy_with_logits/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/concat"
  op: "ConcatV2"
  input: "softmax_cross_entropy_with_logits/concat/values_0"
  input: "softmax_cross_entropy_with_logits/Slice"
  input: "softmax_cross_entropy_with_logits/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/Reshape"
  op: "Reshape"
  input: "dense/BiasAdd"
  input: "softmax_cross_entropy_with_logits/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/Rank_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/Shape_2"
  op: "Shape"
  input: "one_hot"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/Sub_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/Sub_1"
  op: "Sub"
  input: "softmax_cross_entropy_with_logits/Rank_2"
  input: "softmax_cross_entropy_with_logits/Sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/Slice_1/begin"
  op: "Pack"
  input: "softmax_cross_entropy_with_logits/Sub_1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/Slice_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/Slice_1"
  op: "Slice"
  input: "softmax_cross_entropy_with_logits/Shape_2"
  input: "softmax_cross_entropy_with_logits/Slice_1/begin"
  input: "softmax_cross_entropy_with_logits/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/concat_1/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/concat_1"
  op: "ConcatV2"
  input: "softmax_cross_entropy_with_logits/concat_1/values_0"
  input: "softmax_cross_entropy_with_logits/Slice_1"
  input: "softmax_cross_entropy_with_logits/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/Reshape_1"
  op: "Reshape"
  input: "one_hot"
  input: "softmax_cross_entropy_with_logits/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits"
  op: "SoftmaxCrossEntropyWithLogits"
  input: "softmax_cross_entropy_with_logits/Reshape"
  input: "softmax_cross_entropy_with_logits/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/Sub_2/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/Sub_2"
  op: "Sub"
  input: "softmax_cross_entropy_with_logits/Rank"
  input: "softmax_cross_entropy_with_logits/Sub_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/Slice_2/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/Slice_2/size"
  op: "Pack"
  input: "softmax_cross_entropy_with_logits/Sub_2"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/Slice_2"
  op: "Slice"
  input: "softmax_cross_entropy_with_logits/Shape"
  input: "softmax_cross_entropy_with_logits/Slice_2/begin"
  input: "softmax_cross_entropy_with_logits/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits/Reshape_2"
  op: "Reshape"
  input: "softmax_cross_entropy_with_logits"
  input: "softmax_cross_entropy_with_logits/Slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "softmax_cross_entropy_with_logits/Reshape_2"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "ArgMax"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
}
node {
  name: "Equal"
  op: "Equal"
  input: "Cast"
  input: "IteratorGetNext:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
}
node {
  name: "ToFloat"
  op: "Cast"
  input: "Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
}
node {
  name: "accOp/total/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accOp/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accOp/total"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accOp/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "accOp/total/Assign"
  op: "Assign"
  input: "accOp/total"
  input: "accOp/total/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accOp/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "accOp/total/read"
  op: "Identity"
  input: "accOp/total"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accOp/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accOp/count/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accOp/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accOp/count"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accOp/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "accOp/count/Assign"
  op: "Assign"
  input: "accOp/count"
  input: "accOp/count/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accOp/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "accOp/count/read"
  op: "Identity"
  input: "accOp/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accOp/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accOp/Size"
  op: "Size"
  input: "ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "accOp/ToFloat"
  op: "Cast"
  input: "accOp/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accOp/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "accOp/Sum"
  op: "Sum"
  input: "ToFloat"
  input: "accOp/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "accOp/AssignAdd"
  op: "AssignAdd"
  input: "accOp/total"
  input: "accOp/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accOp/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "accOp/AssignAdd_1"
  op: "AssignAdd"
  input: "accOp/count"
  input: "accOp/ToFloat"
  input: "^ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accOp/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "accOp/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accOp/Maximum"
  op: "Maximum"
  input: "accOp/count/read"
  input: "accOp/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accOp/value"
  op: "DivNoNan"
  input: "accOp/total/read"
  input: "accOp/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accOp/Maximum_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accOp/Maximum_1"
  op: "Maximum"
  input: "accOp/AssignAdd_1"
  input: "accOp/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accOp/update_op"
  op: "DivNoNan"
  input: "accOp/AssignAdd"
  input: "accOp/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "accuracy"
      }
    }
  }
}
node {
  name: "accuracy"
  op: "ScalarSummary"
  input: "accuracy/tags"
  input: "accOp/update_op"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/f_count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_1"
  op: "Enter"
  input: "gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge"
  op: "Merge"
  input: "gradients/f_count_1"
  input: "gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch"
  op: "Switch"
  input: "gradients/Merge"
  input: "decoder_scope/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add/y"
  op: "Const"
  input: "^decoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add"
  op: "Add"
  input: "gradients/Switch:1"
  input: "gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration"
  op: "NextIteration"
  input: "gradients/Add"
  input: "^gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPushV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPushV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul_1/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Neg/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/RealDiv/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPushV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_2"
  op: "Exit"
  input: "gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_1"
  op: "Enter"
  input: "gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_1"
  op: "Merge"
  input: "gradients/b_count_1"
  input: "gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/Merge_1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/b_count_2"
  op: "LoopCond"
  input: "gradients/GreaterEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_1"
  op: "Switch"
  input: "gradients/Merge_1"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub"
  op: "Sub"
  input: "gradients/Switch_1:1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_1"
  op: "NextIteration"
  input: "gradients/Sub"
  input: "^gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_3"
  op: "Exit"
  input: "gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_4"
  op: "Enter"
  input: "gradients/f_count_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_2"
  op: "Merge"
  input: "gradients/f_count_4"
  input: "gradients/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_2"
  op: "Switch"
  input: "gradients/Merge_2"
  input: "encoder_scope/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add_1/y"
  op: "Const"
  input: "^encoder_scope/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add_1"
  op: "Add"
  input: "gradients/Switch_2:1"
  input: "gradients/Add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_2"
  op: "NextIteration"
  input: "gradients/Add_1"
  input: "^gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPushV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPushV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPushV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_5"
  op: "Exit"
  input: "gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_5"
  op: "Enter"
  input: "gradients/f_count_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_3"
  op: "Merge"
  input: "gradients/b_count_5"
  input: "gradients/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_1"
  op: "GreaterEqual"
  input: "gradients/Merge_3"
  input: "gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_1/Enter"
  op: "Enter"
  input: "gradients/b_count_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/b_count_6"
  op: "LoopCond"
  input: "gradients/GreaterEqual_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_3"
  op: "Switch"
  input: "gradients/Merge_3"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub_1"
  op: "Sub"
  input: "gradients/Switch_3:1"
  input: "gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_3"
  op: "NextIteration"
  input: "gradients/Sub_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_7"
  op: "Exit"
  input: "gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Tile"
  op: "Tile"
  input: "gradients/Mean_grad/Reshape"
  input: "gradients/Mean_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_1"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_1"
  input: "gradients/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod_1"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_2"
  input: "gradients/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum"
  op: "Maximum"
  input: "gradients/Mean_grad/Prod_1"
  input: "gradients/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/Mean_grad/Prod"
  input: "gradients/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Cast"
  op: "Cast"
  input: "gradients/Mean_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/Mean_grad/Tile"
  input: "gradients/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits/Reshape_2_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/Mean_grad/truediv"
  input: "gradients/softmax_cross_entropy_with_logits/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like"
  op: "ZerosLike"
  input: "softmax_cross_entropy_with_logits:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/softmax_cross_entropy_with_logits/Reshape_2_grad/Reshape"
  input: "gradients/softmax_cross_entropy_with_logits_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_grad/mul"
  op: "Mul"
  input: "gradients/softmax_cross_entropy_with_logits_grad/ExpandDims"
  input: "softmax_cross_entropy_with_logits:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_grad/LogSoftmax"
  op: "LogSoftmax"
  input: "softmax_cross_entropy_with_logits/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_grad/Neg"
  op: "Neg"
  input: "gradients/softmax_cross_entropy_with_logits_grad/LogSoftmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_grad/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_grad/ExpandDims_1"
  op: "ExpandDims"
  input: "gradients/softmax_cross_entropy_with_logits/Reshape_2_grad/Reshape"
  input: "gradients/softmax_cross_entropy_with_logits_grad/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_grad/mul_1"
  op: "Mul"
  input: "gradients/softmax_cross_entropy_with_logits_grad/ExpandDims_1"
  input: "gradients/softmax_cross_entropy_with_logits_grad/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/softmax_cross_entropy_with_logits_grad/mul"
  input: "^gradients/softmax_cross_entropy_with_logits_grad/mul_1"
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_with_logits_grad/mul"
  input: "^gradients/softmax_cross_entropy_with_logits_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_with_logits_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_with_logits_grad/mul_1"
  input: "^gradients/softmax_cross_entropy_with_logits_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_with_logits_grad/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits/Reshape_grad/Shape"
  op: "Shape"
  input: "dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_with_logits_grad/tuple/control_dependency"
  input: "gradients/softmax_cross_entropy_with_logits/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/softmax_cross_entropy_with_logits/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/dense/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/dense/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/softmax_cross_entropy_with_logits/Reshape_grad/Reshape"
}
node {
  name: "gradients/dense/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_with_logits/Reshape_grad/Reshape"
  input: "^gradients/dense/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_with_logits/Reshape_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dense/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/dense/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot_grad/Shape"
  op: "Shape"
  input: "dense/Tensordot/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dense/Tensordot_grad/Reshape"
  op: "Reshape"
  input: "gradients/dense/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/dense/Tensordot_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/dense/Tensordot_grad/Reshape"
  input: "dense/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/dense/Tensordot/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dense/Tensordot/Reshape"
  input: "gradients/dense/Tensordot_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dense/Tensordot/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/dense/Tensordot/MatMul_grad/MatMul"
  input: "^gradients/dense/Tensordot/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/dense/Tensordot/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dense/Tensordot/MatMul_grad/MatMul"
  input: "^gradients/dense/Tensordot/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense/Tensordot/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dense/Tensordot/MatMul_grad/MatMul_1"
  input: "^gradients/dense/Tensordot/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense/Tensordot/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/Reshape_grad/Shape"
  op: "Shape"
  input: "dense/Tensordot/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dense/Tensordot/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/dense/Tensordot/MatMul_grad/tuple/control_dependency"
  input: "gradients/dense/Tensordot/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/Reshape_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000z\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/dense/Tensordot/MatMul_grad/tuple/control_dependency_1"
  input: "gradients/dense/Tensordot/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "dense/Tensordot/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/dense/Tensordot/Reshape_grad/Reshape"
  input: "gradients/dense/Tensordot/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "dense/Tensordot/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/dense/Tensordot/Reshape_1_grad/Reshape"
  input: "gradients/dense/Tensordot/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "decoder_scope/rnn/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/dense/Tensordot/transpose_grad/transpose"
  input: "gradients/decoder_scope/rnn/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "decoder_scope/rnn/TensorArray"
  input: "decoder_scope/rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "decoder_scope/rnn/while/Exit_2"
  input: "^gradients/decoder_scope/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients/decoder_scope/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "decoder_scope/rnn/TensorArrayStack/range"
  input: "gradients/decoder_scope/rnn/transpose_1_grad/transpose"
  input: "gradients/decoder_scope/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_1"
  op: "ZerosLike"
  input: "decoder_scope/rnn/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_2"
  op: "ZerosLike"
  input: "decoder_scope/rnn/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_3"
  op: "ZerosLike"
  input: "decoder_scope/rnn/while/Exit_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_4"
  op: "ZerosLike"
  input: "decoder_scope/rnn/while/Exit_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_5"
  op: "ZerosLike"
  input: "decoder_scope/rnn/while/Exit_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_6"
  op: "ZerosLike"
  input: "decoder_scope/rnn/while/Exit_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Exit_5_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Exit_6_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Exit_7_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Exit_8_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/decoder_scope/rnn/while/Exit_2_grad/b_exit"
  input: "gradients/decoder_scope/rnn/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/decoder_scope/rnn/while/Exit_3_grad/b_exit"
  input: "gradients/decoder_scope/rnn/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "gradients/decoder_scope/rnn/while/Exit_4_grad/b_exit"
  input: "gradients/decoder_scope/rnn/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Switch_5_grad/b_switch"
  op: "Merge"
  input: "gradients/decoder_scope/rnn/while/Exit_5_grad/b_exit"
  input: "gradients/decoder_scope/rnn/while/Switch_5_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Switch_6_grad/b_switch"
  op: "Merge"
  input: "gradients/decoder_scope/rnn/while/Exit_6_grad/b_exit"
  input: "gradients/decoder_scope/rnn/while/Switch_6_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Switch_7_grad/b_switch"
  op: "Merge"
  input: "gradients/decoder_scope/rnn/while/Exit_7_grad/b_exit"
  input: "gradients/decoder_scope/rnn/while/Switch_7_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Switch_8_grad/b_switch"
  op: "Merge"
  input: "gradients/decoder_scope/rnn/while/Exit_8_grad/b_exit"
  input: "gradients/decoder_scope/rnn/while/Switch_8_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/decoder_scope/rnn/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/Merge_2_grad/Switch"
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/Merge_2_grad/Switch"
  input: "^gradients/decoder_scope/rnn/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/Merge_2_grad/Switch:1"
  input: "^gradients/decoder_scope/rnn/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/decoder_scope/rnn/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/Merge_3_grad/Switch"
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/Merge_3_grad/Switch"
  input: "^gradients/decoder_scope/rnn/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/Merge_3_grad/Switch:1"
  input: "^gradients/decoder_scope/rnn/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "gradients/decoder_scope/rnn/while/Switch_4_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/Merge_4_grad/Switch"
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/Merge_4_grad/Switch"
  input: "^gradients/decoder_scope/rnn/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/Merge_4_grad/Switch:1"
  input: "^gradients/decoder_scope/rnn/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_5_grad/Switch"
  op: "Switch"
  input: "gradients/decoder_scope/rnn/while/Switch_5_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_5_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/Merge_5_grad/Switch"
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_5_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/Merge_5_grad/Switch"
  input: "^gradients/decoder_scope/rnn/while/Merge_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_5_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/Merge_5_grad/Switch:1"
  input: "^gradients/decoder_scope/rnn/while/Merge_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_6_grad/Switch"
  op: "Switch"
  input: "gradients/decoder_scope/rnn/while/Switch_6_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_6_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_6_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/Merge_6_grad/Switch"
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_6_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/Merge_6_grad/Switch"
  input: "^gradients/decoder_scope/rnn/while/Merge_6_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_6_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_6_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/Merge_6_grad/Switch:1"
  input: "^gradients/decoder_scope/rnn/while/Merge_6_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_6_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_7_grad/Switch"
  op: "Switch"
  input: "gradients/decoder_scope/rnn/while/Switch_7_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_7_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_7_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/Merge_7_grad/Switch"
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_7_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/Merge_7_grad/Switch"
  input: "^gradients/decoder_scope/rnn/while/Merge_7_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_7_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_7_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/Merge_7_grad/Switch:1"
  input: "^gradients/decoder_scope/rnn/while/Merge_7_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_7_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_8_grad/Switch"
  op: "Switch"
  input: "gradients/decoder_scope/rnn/while/Switch_8_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_8_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/Merge_8_grad/Switch"
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_8_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/Merge_8_grad/Switch"
  input: "^gradients/decoder_scope/rnn/while/Merge_8_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Merge_8_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/Merge_8_grad/Switch:1"
  input: "^gradients/decoder_scope/rnn/while/Merge_8_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/decoder_scope/rnn/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/decoder_scope/rnn/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "gradients/decoder_scope/rnn/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Enter_5_grad/Exit"
  op: "Exit"
  input: "gradients/decoder_scope/rnn/while/Merge_5_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Enter_6_grad/Exit"
  op: "Exit"
  input: "gradients/decoder_scope/rnn/while/Merge_6_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Enter_7_grad/Exit"
  op: "Exit"
  input: "gradients/decoder_scope/rnn/while/Merge_7_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Enter_8_grad/Exit"
  op: "Exit"
  input: "gradients/decoder_scope/rnn/while/Merge_8_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/decoder_scope/rnn/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "decoder_scope/rnn/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "decoder_scope/rnn/while/Identity_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPopV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPopV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul_1/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Neg/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/RealDiv/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPopV2"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPopV2_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/Enter_3_grad/Exit"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/Enter_4_grad/Exit"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Exit_5_grad/b_exit"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/Enter_5_grad/Exit"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Exit_6_grad/b_exit"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/Enter_6_grad/Exit"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Exit_7_grad/b_exit"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/Enter_7_grad/Exit"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Exit_8_grad/b_exit"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/Enter_8_grad/Exit"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul"
  op: "Mul"
  input: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/Floor"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/Floor"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/Floor"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Sum"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul_1/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul_1/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Mul_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Sum_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Reshape_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Reshape_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/encoder_scope/rnn/while/Exit_3_grad/b_exit"
  input: "gradients/encoder_scope/rnn/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "gradients/encoder_scope/rnn/while/Exit_4_grad/b_exit"
  input: "gradients/encoder_scope/rnn/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Switch_5_grad/b_switch"
  op: "Merge"
  input: "gradients/encoder_scope/rnn/while/Exit_5_grad/b_exit"
  input: "gradients/encoder_scope/rnn/while/Switch_5_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Switch_6_grad/b_switch"
  op: "Merge"
  input: "gradients/encoder_scope/rnn/while/Exit_6_grad/b_exit"
  input: "gradients/encoder_scope/rnn/while/Switch_6_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Switch_7_grad/b_switch"
  op: "Merge"
  input: "gradients/encoder_scope/rnn/while/Exit_7_grad/b_exit"
  input: "gradients/encoder_scope/rnn/while/Switch_7_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Switch_8_grad/b_switch"
  op: "Merge"
  input: "gradients/encoder_scope/rnn/while/Exit_8_grad/b_exit"
  input: "gradients/encoder_scope/rnn/while/Switch_8_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/BroadcastGradientArgs/Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/RealDiv/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/RealDiv/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/RealDiv/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/RealDiv/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/RealDiv/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/RealDiv/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/RealDiv/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/sub"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/RealDiv/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/RealDiv/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/RealDiv/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/RealDiv/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/RealDiv"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Neg"
  op: "Neg"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Neg/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Neg/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Neg/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Neg/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Neg/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Neg/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Neg/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Neg/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Neg/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Neg/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Neg"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/RealDiv_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/mul"
  op: "Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/mul_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Sum_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Reshape_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Reshape_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/encoder_scope/rnn/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/Merge_3_grad/Switch"
}
node {
  name: "gradients/encoder_scope/rnn/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/Merge_3_grad/Switch"
  input: "^gradients/encoder_scope/rnn/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/Merge_3_grad/Switch:1"
  input: "^gradients/encoder_scope/rnn/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "gradients/encoder_scope/rnn/while/Switch_4_grad/b_switch"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/Merge_4_grad/Switch"
}
node {
  name: "gradients/encoder_scope/rnn/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/Merge_4_grad/Switch"
  input: "^gradients/encoder_scope/rnn/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/Merge_4_grad/Switch:1"
  input: "^gradients/encoder_scope/rnn/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Merge_5_grad/Switch"
  op: "Switch"
  input: "gradients/encoder_scope/rnn/while/Switch_5_grad/b_switch"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Merge_5_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/Merge_5_grad/Switch"
}
node {
  name: "gradients/encoder_scope/rnn/while/Merge_5_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/Merge_5_grad/Switch"
  input: "^gradients/encoder_scope/rnn/while/Merge_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Merge_5_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/Merge_5_grad/Switch:1"
  input: "^gradients/encoder_scope/rnn/while/Merge_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Merge_6_grad/Switch"
  op: "Switch"
  input: "gradients/encoder_scope/rnn/while/Switch_6_grad/b_switch"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/Switch_6_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Merge_6_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/Merge_6_grad/Switch"
}
node {
  name: "gradients/encoder_scope/rnn/while/Merge_6_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/Merge_6_grad/Switch"
  input: "^gradients/encoder_scope/rnn/while/Merge_6_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/Switch_6_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Merge_6_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/Merge_6_grad/Switch:1"
  input: "^gradients/encoder_scope/rnn/while/Merge_6_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/Switch_6_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Merge_7_grad/Switch"
  op: "Switch"
  input: "gradients/encoder_scope/rnn/while/Switch_7_grad/b_switch"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/Switch_7_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Merge_7_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/Merge_7_grad/Switch"
}
node {
  name: "gradients/encoder_scope/rnn/while/Merge_7_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/Merge_7_grad/Switch"
  input: "^gradients/encoder_scope/rnn/while/Merge_7_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/Switch_7_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Merge_7_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/Merge_7_grad/Switch:1"
  input: "^gradients/encoder_scope/rnn/while/Merge_7_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/Switch_7_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Merge_8_grad/Switch"
  op: "Switch"
  input: "gradients/encoder_scope/rnn/while/Switch_8_grad/b_switch"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Merge_8_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/Merge_8_grad/Switch"
}
node {
  name: "gradients/encoder_scope/rnn/while/Merge_8_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/Merge_8_grad/Switch"
  input: "^gradients/encoder_scope/rnn/while/Merge_8_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Merge_8_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/Merge_8_grad/Switch:1"
  input: "^gradients/encoder_scope/rnn/while/Merge_8_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/decoder_scope/rnn/while/Merge_8_grad/tuple/control_dependency_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/dropout/truediv_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Shape_1"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/AddN"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Sum_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Reshape_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Reshape_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/encoder_scope/rnn/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "gradients/encoder_scope/rnn/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Enter_5_grad/Exit"
  op: "Exit"
  input: "gradients/encoder_scope/rnn/while/Merge_5_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Enter_6_grad/Exit"
  op: "Exit"
  input: "gradients/encoder_scope/rnn/while/Merge_6_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Enter_7_grad/Exit"
  op: "Exit"
  input: "gradients/encoder_scope/rnn/while/Merge_7_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Enter_8_grad/Exit"
  op: "Exit"
  input: "gradients/encoder_scope/rnn/while/Merge_8_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Shape_1"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Shape"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/b_sync"
  op: "ControlTrigger"
  input: "^gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPopV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPopV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPopV2"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPopV2_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Shape_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/encoder_scope/rnn/while/Merge_8_grad/tuple/control_dependency_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_2"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/Merge_8_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Sum_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Reshape_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Reshape_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/decoder_scope/rnn/while/Merge_7_grad/tuple/control_dependency_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_7_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Shape_1"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Sum_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Reshape_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Reshape_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/Mul/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/Identity_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Shape_1"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul"
  op: "Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/Identity_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/Identity_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/Enter"
  input: "decoder_scope/rnn/while/Identity_7"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Sum_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Reshape_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Reshape_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Shape_1"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/tuple/control_dependency_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Sum_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Reshape_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Reshape_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/encoder_scope/rnn/while/Merge_7_grad/tuple/control_dependency_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/Switch_7_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Shape_1"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Shape"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Shape_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Sum_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Reshape_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Reshape_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/while/Identity_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Shape_1"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Shape"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Shape_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul"
  op: "Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/tuple/control_dependency"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/Identity_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/Identity_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/Enter"
  input: "encoder_scope/rnn/while/Identity_7"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Sum_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Reshape_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Reshape_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Shape_1"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Shape"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Shape_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/tuple/control_dependency_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Sum_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Reshape_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Reshape_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Switch_7_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Sum"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_grad/SigmoidGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Reshape"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Sum_1"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_grad/SigmoidGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Sum_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Reshape_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Reshape_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/Mul/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/Mul/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh_grad/TanhGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Switch_7_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Shape"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Sum"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_grad/SigmoidGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Sum_1"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_grad/SigmoidGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Sum_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Reshape_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Reshape_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split_grad/concat"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split_grad/concat"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Tanh_grad/TanhGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Add_grad/tuple/control_dependency"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split_grad/concat"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split_grad/concat"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Const"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN"
  op: "ShapeN"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/Identity_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/Identity_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/Enter_1"
  input: "decoder_scope/rnn/while/Identity_8"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/mod"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Slice"
  op: "Slice"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ConcatOffset"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ConcatOffset:1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Slice"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Slice_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Slice"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Slice_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/b_acc_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/Switch:1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul"
  op: "Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/Floor"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/Floor"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/Floor"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Sum"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Sum_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Const"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN"
  op: "ShapeN"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/Identity_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/Identity_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/Enter_1"
  input: "encoder_scope/rnn/while/Identity_8"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/mod"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Slice"
  op: "Slice"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/tuple/control_dependency"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ConcatOffset"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/tuple/control_dependency"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ConcatOffset:1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Slice"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Slice_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Slice"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Slice_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/b_acc_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/Switch:1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/sub"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg"
  op: "Neg"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/mul"
  op: "Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Sum_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Reshape_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Reshape_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Switch_8_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Shape"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Shape_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul"
  op: "Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/tuple/control_dependency"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/Floor"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/Floor"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/Floor"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Sum"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Sum_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/decoder_scope/rnn/while/Merge_6_grad/tuple/control_dependency_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_6_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Shape_1"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/AddN_3"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Sum_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Reshape_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Reshape_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Shape"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/control_dependency"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/sub"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg"
  op: "Neg"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/mul"
  op: "Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/control_dependency"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Sum_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Reshape_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Reshape_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Switch_8_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/encoder_scope/rnn/while/Merge_6_grad/tuple/control_dependency_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/dropout/truediv_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/Switch_6_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Shape_1"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Shape"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Shape_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/AddN_4"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_2"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Sum_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Reshape_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Reshape_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_5"
  op: "AddN"
  input: "gradients/decoder_scope/rnn/while/Merge_5_grad/tuple/control_dependency_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Shape_1"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_5"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_5"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Sum_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Reshape_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Reshape_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/Mul/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/Identity_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Shape_1"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul"
  op: "Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/Identity_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/Identity_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/Enter"
  input: "decoder_scope/rnn/while/Identity_5"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Sum_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Reshape_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Reshape_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Shape_1"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/tuple/control_dependency_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Sum_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Reshape_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Reshape_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_6"
  op: "AddN"
  input: "gradients/encoder_scope/rnn/while/Merge_5_grad/tuple/control_dependency_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Shape_1"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Shape"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Shape_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_6"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_6"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Sum_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Reshape_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Reshape_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/while/Identity_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Shape_1"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Shape"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Shape_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul"
  op: "Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/tuple/control_dependency"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/Identity_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/Identity_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/Enter"
  input: "encoder_scope/rnn/while/Identity_5"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Sum_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Reshape_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Reshape_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Shape_1"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Shape"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Shape_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/tuple/control_dependency_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Sum_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Reshape_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Reshape_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Switch_5_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Sum"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_grad/SigmoidGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Reshape"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Sum_1"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_grad/SigmoidGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Sum_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Reshape_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Reshape_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/Mul/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/Mul/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh_grad/TanhGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Switch_5_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Shape"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Sum"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_grad/SigmoidGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Sum_1"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_grad/SigmoidGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Sum_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Reshape_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Reshape_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split_grad/concat"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split_grad/concat"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Tanh_grad/TanhGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Add_grad/tuple/control_dependency"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split_grad/concat"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split_grad/concat"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Const"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN"
  op: "ShapeN"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/Identity_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/Identity_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/Enter_1"
  input: "decoder_scope/rnn/while/Identity_6"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/mod"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Slice"
  op: "Slice"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ConcatOffset"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ConcatOffset:1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Slice"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Slice_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Slice"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Slice_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/b_acc_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/Switch:1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul"
  op: "Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/Floor"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/Floor"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/Floor"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Sum"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Sum_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Const"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN"
  op: "ShapeN"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/Identity_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/Identity_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/Enter_1"
  input: "encoder_scope/rnn/while/Identity_6"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/mod"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Slice"
  op: "Slice"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/tuple/control_dependency"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ConcatOffset"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/tuple/control_dependency"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ConcatOffset:1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Slice"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Slice_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Slice"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Slice_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/b_acc_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/Switch:1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/sub"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg"
  op: "Neg"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/mul"
  op: "Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Sum_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Reshape_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Reshape_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Switch_6_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Shape"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Shape_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul"
  op: "Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/tuple/control_dependency"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/Floor"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/Floor"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/Floor"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Sum"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Sum_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_7"
  op: "AddN"
  input: "gradients/decoder_scope/rnn/while/Merge_4_grad/tuple/control_dependency_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Shape_1"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/AddN_7"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Sum_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Reshape_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Reshape_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Shape"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/control_dependency"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/sub"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg"
  op: "Neg"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/mul"
  op: "Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/control_dependency"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Sum_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Reshape_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Reshape_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Switch_6_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_8"
  op: "AddN"
  input: "gradients/encoder_scope/rnn/while/Merge_4_grad/tuple/control_dependency_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/dropout/truediv_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Shape_1"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Shape"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Shape_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/AddN_8"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_2"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Sum_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Reshape_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Reshape_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_9"
  op: "AddN"
  input: "gradients/decoder_scope/rnn/while/Merge_3_grad/tuple/control_dependency_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Shape_1"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_9"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_9"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Sum_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Reshape_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Reshape_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/Mul/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Shape_1"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul"
  op: "Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/Enter"
  input: "decoder_scope/rnn/while/Identity_3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Sum_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Reshape_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Reshape_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Shape_1"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/tuple/control_dependency_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Sum_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Reshape_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Reshape_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_10"
  op: "AddN"
  input: "gradients/encoder_scope/rnn/while/Merge_3_grad/tuple/control_dependency_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Shape_1"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Shape"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Shape_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_10"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_10"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Sum_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Reshape_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Reshape_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Shape_1"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Shape"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Shape_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul"
  op: "Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/tuple/control_dependency"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/Enter"
  input: "encoder_scope/rnn/while/Identity_3"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Sum_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Reshape_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Reshape_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Shape_1"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Shape"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Shape_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/tuple/control_dependency_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Sum_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Reshape_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Reshape_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Sum"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_grad/SigmoidGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Reshape"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Sum_1"
  op: "Sum"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_grad/SigmoidGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Sum_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Reshape_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Reshape"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Reshape_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/Mul/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/Mul/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh_grad/TanhGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Shape"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Sum"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_grad/SigmoidGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Sum_1"
  op: "Sum"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_grad/SigmoidGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Sum_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Reshape_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Reshape"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Reshape_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split_grad/concat"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split_grad/concat"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Tanh_grad/TanhGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Add_grad/tuple/control_dependency"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/Enter"
  input: "decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split_grad/concat"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split_grad/concat"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Const"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Shape"
  op: "Shape"
  input: "decoder_scope/rnn/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN"
  op: "ShapeN"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/Enter"
  input: "decoder_scope/rnn/while/TensorArrayReadV3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/Enter_1"
  input: "decoder_scope/rnn/while/Identity_4"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/mod"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Slice"
  op: "Slice"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ConcatOffset"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ConcatOffset:1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Slice"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Slice_1"
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Slice"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Slice_1"
  input: "^gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/b_acc_1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/Switch:1"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/Enter"
  input: "encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/decoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/decoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "decoder_scope/rnn/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "decoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/decoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/decoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/decoder_scope/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Const"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Shape"
  op: "Shape"
  input: "encoder_scope/rnn/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN"
  op: "ShapeN"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/Enter"
  input: "encoder_scope/rnn/while/TensorArrayReadV3"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/Enter_1"
  input: "encoder_scope/rnn/while/Identity_4"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/mod"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Slice"
  op: "Slice"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/tuple/control_dependency"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ConcatOffset"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/tuple/control_dependency"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ConcatOffset:1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Slice"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Slice_1"
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Slice"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Slice_1"
  input: "^gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/b_acc_1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/Switch:1"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/decoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/decoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/decoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/decoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/decoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/decoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/decoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "encoder_scope/rnn/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "encoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/tuple/control_dependency"
  input: "gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  op: "StackV2"
  input: "gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encoder_scope/rnn/while/Identity_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "decoder_scope/rnn/TensorArray_1"
  input: "gradients/decoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/decoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/decoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "decoder_scope/rnn/TensorArrayUnstack/range"
  input: "gradients/decoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/decoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
}
node {
  name: "gradients/decoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/decoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/decoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/encoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder_scope/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/encoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/encoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/encoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/encoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/encoder_scope/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/encoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/encoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "decoder_scope/rnn/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder_scope/rnn/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/decoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "gradients/decoder_scope/rnn/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "encoder_scope/rnn/TensorArray_1"
  input: "gradients/encoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/encoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/encoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "encoder_scope/rnn/TensorArrayUnstack/range"
  input: "gradients/encoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/encoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
}
node {
  name: "gradients/encoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/encoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/encoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder_scope/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "encoder_scope/rnn/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder_scope/rnn/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/encoder_scope/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "gradients/encoder_scope/rnn/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 25
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "z\000\000\000\000\000\000\000\200\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_1_grad/ToInt32"
  op: "Cast"
  input: "gradients/embedding_lookup_1_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_1_grad/Size"
  op: "Size"
  input: "IteratorGetNext:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/embedding_lookup_1_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_1_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/embedding_lookup_1_grad/Size"
  input: "gradients/embedding_lookup_1_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_1_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_1_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_1_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_1_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/embedding_lookup_1_grad/ToInt32"
  input: "gradients/embedding_lookup_1_grad/strided_slice/stack"
  input: "gradients/embedding_lookup_1_grad/strided_slice/stack_1"
  input: "gradients/embedding_lookup_1_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/embedding_lookup_1_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_1_grad/concat"
  op: "ConcatV2"
  input: "gradients/embedding_lookup_1_grad/ExpandDims"
  input: "gradients/embedding_lookup_1_grad/strided_slice"
  input: "gradients/embedding_lookup_1_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/decoder_scope/rnn/transpose_grad/transpose"
  input: "gradients/embedding_lookup_1_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_1_grad/Reshape_1"
  op: "Reshape"
  input: "IteratorGetNext:1"
  input: "gradients/embedding_lookup_1_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "z\000\000\000\000\000\000\000\200\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/ToInt32"
  op: "Cast"
  input: "gradients/embedding_lookup_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/Size"
  op: "Size"
  input: "IteratorGetNext"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/embedding_lookup_grad/Size"
  input: "gradients/embedding_lookup_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/embedding_lookup_grad/ToInt32"
  input: "gradients/embedding_lookup_grad/strided_slice/stack"
  input: "gradients/embedding_lookup_grad/strided_slice/stack_1"
  input: "gradients/embedding_lookup_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/concat"
  op: "ConcatV2"
  input: "gradients/embedding_lookup_grad/ExpandDims"
  input: "gradients/embedding_lookup_grad/strided_slice"
  input: "gradients/embedding_lookup_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder_scope/rnn/transpose_grad/transpose"
  input: "gradients/embedding_lookup_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/embedding_lookup_grad/Reshape_1"
  op: "Reshape"
  input: "IteratorGetNext"
  input: "gradients/embedding_lookup_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/concat"
  op: "ConcatV2"
  input: "gradients/embedding_lookup_1_grad/Reshape"
  input: "gradients/embedding_lookup_grad/Reshape"
  input: "gradients/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/concat_1"
  op: "ConcatV2"
  input: "gradients/embedding_lookup_1_grad/Reshape_1"
  input: "gradients/embedding_lookup_grad/Reshape_1"
  input: "gradients/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "beta1_power/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "beta1_power"
    }
  }
}
node {
  name: "beta1_power/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "AssignVariableOp"
  input: "beta1_power"
  input: "beta1_power/Initializer/initial_value"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "beta1_power/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "beta2_power/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "beta2_power"
    }
  }
}
node {
  name: "beta2_power/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "AssignVariableOp"
  input: "beta2_power"
  input: "beta2_power/Initializer/initial_value"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "beta2_power/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "embedding/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "z\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "embedding/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "embedding/Adam/Initializer/zeros"
  op: "Fill"
  input: "embedding/Adam/Initializer/zeros/shape_as_tensor"
  input: "embedding/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "embedding/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 122
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "embedding/Adam/Assign"
  op: "Assign"
  input: "embedding/Adam"
  input: "embedding/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "embedding/Adam/read"
  op: "Identity"
  input: "embedding/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "embedding/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "z\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "embedding/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "embedding/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "embedding/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "embedding/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "embedding/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 122
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "embedding/Adam_1/Assign"
  op: "Assign"
  input: "embedding/Adam_1"
  input: "embedding/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "embedding/Adam_1/read"
  op: "Identity"
  input: "embedding/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000z\000\000\000"
      }
    }
  }
}
node {
  name: "dense/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "dense/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "dense/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 122
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/kernel/Adam/Assign"
  op: "Assign"
  input: "dense/kernel/Adam"
  input: "dense/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/kernel/Adam/read"
  op: "Identity"
  input: "dense/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000z\000\000\000"
      }
    }
  }
}
node {
  name: "dense/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "dense/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "dense/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 122
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/kernel/Adam_1/Assign"
  op: "Assign"
  input: "dense/kernel/Adam_1"
  input: "dense/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/kernel/Adam_1/read"
  op: "Identity"
  input: "dense/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
}
node {
  name: "dense/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 122
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 122
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/bias/Adam/Assign"
  op: "Assign"
  input: "dense/bias/Adam"
  input: "dense/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/bias/Adam/read"
  op: "Identity"
  input: "dense/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
        }
      }
    }
  }
}
node {
  name: "dense/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 122
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 122
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/bias/Adam_1/Assign"
  op: "Assign"
  input: "dense/bias/Adam_1"
  input: "dense/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/bias/Adam_1/read"
  op: "Identity"
  input: "dense/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
        }
      }
    }
  }
}
node {
  name: "Adam/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "Adam/beta1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/epsilon"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "Adam/update_embedding/Unique"
  op: "Unique"
  input: "gradients/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Adam/update_embedding/Shape"
  op: "Shape"
  input: "Adam/update_embedding/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Adam/update_embedding/strided_slice/stack"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Adam/update_embedding/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Adam/update_embedding/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Adam/update_embedding/strided_slice"
  op: "StridedSlice"
  input: "Adam/update_embedding/Shape"
  input: "Adam/update_embedding/strided_slice/stack"
  input: "Adam/update_embedding/strided_slice/stack_1"
  input: "Adam/update_embedding/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Adam/update_embedding/UnsortedSegmentSum"
  op: "UnsortedSegmentSum"
  input: "gradients/concat"
  input: "Adam/update_embedding/Unique:1"
  input: "Adam/update_embedding/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_embedding/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_embedding/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Adam/update_embedding/sub"
  op: "Sub"
  input: "Adam/update_embedding/sub/x"
  input: "Adam/update_embedding/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_embedding/Sqrt"
  op: "Sqrt"
  input: "Adam/update_embedding/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_embedding/mul"
  op: "Mul"
  input: "Adam/learning_rate"
  input: "Adam/update_embedding/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_embedding/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_embedding/sub_1/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Adam/update_embedding/sub_1"
  op: "Sub"
  input: "Adam/update_embedding/sub_1/x"
  input: "Adam/update_embedding/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_embedding/truediv"
  op: "RealDiv"
  input: "Adam/update_embedding/mul"
  input: "Adam/update_embedding/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_embedding/sub_2/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Adam/update_embedding/sub_2"
  op: "Sub"
  input: "Adam/update_embedding/sub_2/x"
  input: "Adam/beta1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_embedding/mul_1"
  op: "Mul"
  input: "Adam/update_embedding/UnsortedSegmentSum"
  input: "Adam/update_embedding/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_embedding/mul_2"
  op: "Mul"
  input: "embedding/Adam/read"
  input: "Adam/beta1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_embedding/Assign"
  op: "Assign"
  input: "embedding/Adam"
  input: "Adam/update_embedding/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/update_embedding/ScatterAdd"
  op: "ScatterAdd"
  input: "embedding/Adam"
  input: "Adam/update_embedding/Unique"
  input: "Adam/update_embedding/mul_1"
  input: "^Adam/update_embedding/Assign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_embedding/mul_3"
  op: "Mul"
  input: "Adam/update_embedding/UnsortedSegmentSum"
  input: "Adam/update_embedding/UnsortedSegmentSum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_embedding/sub_3/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Adam/update_embedding/sub_3"
  op: "Sub"
  input: "Adam/update_embedding/sub_3/x"
  input: "Adam/beta2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_embedding/mul_4"
  op: "Mul"
  input: "Adam/update_embedding/mul_3"
  input: "Adam/update_embedding/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_embedding/mul_5"
  op: "Mul"
  input: "embedding/Adam_1/read"
  input: "Adam/beta2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_embedding/Assign_1"
  op: "Assign"
  input: "embedding/Adam_1"
  input: "Adam/update_embedding/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/update_embedding/ScatterAdd_1"
  op: "ScatterAdd"
  input: "embedding/Adam_1"
  input: "Adam/update_embedding/Unique"
  input: "Adam/update_embedding/mul_4"
  input: "^Adam/update_embedding/Assign_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_embedding/Sqrt_1"
  op: "Sqrt"
  input: "Adam/update_embedding/ScatterAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_embedding/mul_6"
  op: "Mul"
  input: "Adam/update_embedding/truediv"
  input: "Adam/update_embedding/ScatterAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_embedding/add"
  op: "Add"
  input: "Adam/update_embedding/Sqrt_1"
  input: "Adam/epsilon"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_embedding/truediv_1"
  op: "RealDiv"
  input: "Adam/update_embedding/mul_6"
  input: "Adam/update_embedding/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_embedding/AssignSub"
  op: "AssignSub"
  input: "embedding"
  input: "Adam/update_embedding/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_embedding/group_deps"
  op: "NoOp"
  input: "^Adam/update_embedding/AssignSub"
  input: "^Adam/update_embedding/ScatterAdd"
  input: "^Adam/update_embedding/ScatterAdd_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
}
node {
  name: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
  input: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
  input: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/ResourceApplyAdam/ReadVariableOp"
  input: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
  input: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
  input: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/ResourceApplyAdam/ReadVariableOp"
  input: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
  input: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
  input: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/ResourceApplyAdam/ReadVariableOp"
  input: "Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/encoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
  input: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
  input: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/ResourceApplyAdam/ReadVariableOp"
  input: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_0/lstm0/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
  input: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
  input: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/ResourceApplyAdam/ReadVariableOp"
  input: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_1/lstm1/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
  input: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
  input: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/ResourceApplyAdam/ReadVariableOp"
  input: "Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/decoder_scope/rnn/while/rnn/multi_rnn_cell/cell_2/lstm2/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_dense/kernel/ApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_dense/kernel/ApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_dense/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "dense/kernel"
  input: "dense/kernel/Adam"
  input: "dense/kernel/Adam_1"
  input: "Adam/update_dense/kernel/ApplyAdam/ReadVariableOp"
  input: "Adam/update_dense/kernel/ApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/dense/Tensordot/transpose_1_grad/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_dense/bias/ApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_dense/bias/ApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_dense/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "dense/bias"
  input: "dense/bias/Adam"
  input: "dense/bias/Adam_1"
  input: "Adam/update_dense/bias/ApplyAdam/ReadVariableOp"
  input: "Adam/update_dense/bias/ApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/dense/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/ResourceApplyAdam"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/ResourceApplyAdam"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/ResourceApplyAdam"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/ResourceApplyAdam"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/ResourceApplyAdam"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/ResourceApplyAdam"
  input: "^Adam/update_dense/bias/ApplyAdam"
  input: "^Adam/update_dense/kernel/ApplyAdam"
  input: "^Adam/update_embedding/group_deps"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/ResourceApplyAdam"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/ResourceApplyAdam"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/ResourceApplyAdam"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/ResourceApplyAdam"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/ResourceApplyAdam"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/ResourceApplyAdam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/mul"
  op: "Mul"
  input: "Adam/ReadVariableOp"
  input: "Adam/beta1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/AssignVariableOp"
  op: "AssignVariableOp"
  input: "beta1_power"
  input: "Adam/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta1_power"
  input: "^Adam/AssignVariableOp"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/ResourceApplyAdam"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/ResourceApplyAdam"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/ResourceApplyAdam"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/ResourceApplyAdam"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/ResourceApplyAdam"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/ResourceApplyAdam"
  input: "^Adam/update_dense/bias/ApplyAdam"
  input: "^Adam/update_dense/kernel/ApplyAdam"
  input: "^Adam/update_embedding/group_deps"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/ResourceApplyAdam"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/ResourceApplyAdam"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/ResourceApplyAdam"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/ResourceApplyAdam"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/ResourceApplyAdam"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/ResourceApplyAdam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "beta2_power"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/ResourceApplyAdam"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/ResourceApplyAdam"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/ResourceApplyAdam"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/ResourceApplyAdam"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/ResourceApplyAdam"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/ResourceApplyAdam"
  input: "^Adam/update_dense/bias/ApplyAdam"
  input: "^Adam/update_dense/kernel/ApplyAdam"
  input: "^Adam/update_embedding/group_deps"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/ResourceApplyAdam"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/ResourceApplyAdam"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/ResourceApplyAdam"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/ResourceApplyAdam"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/ResourceApplyAdam"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/ResourceApplyAdam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/mul_1"
  op: "Mul"
  input: "Adam/ReadVariableOp_2"
  input: "Adam/beta2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "beta2_power"
  input: "Adam/mul_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "beta2_power"
  input: "^Adam/AssignVariableOp_1"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/ResourceApplyAdam"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/ResourceApplyAdam"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/ResourceApplyAdam"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/ResourceApplyAdam"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/ResourceApplyAdam"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/ResourceApplyAdam"
  input: "^Adam/update_dense/bias/ApplyAdam"
  input: "^Adam/update_dense/kernel/ApplyAdam"
  input: "^Adam/update_embedding/group_deps"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/ResourceApplyAdam"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/ResourceApplyAdam"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/ResourceApplyAdam"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/ResourceApplyAdam"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/ResourceApplyAdam"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/ResourceApplyAdam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update"
  op: "NoOp"
  input: "^Adam/ReadVariableOp_1"
  input: "^Adam/ReadVariableOp_3"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/ResourceApplyAdam"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/ResourceApplyAdam"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/ResourceApplyAdam"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/ResourceApplyAdam"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/ResourceApplyAdam"
  input: "^Adam/update_decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/ResourceApplyAdam"
  input: "^Adam/update_dense/bias/ApplyAdam"
  input: "^Adam/update_dense/kernel/ApplyAdam"
  input: "^Adam/update_embedding/group_deps"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/ResourceApplyAdam"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/ResourceApplyAdam"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/ResourceApplyAdam"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/ResourceApplyAdam"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/ResourceApplyAdam"
  input: "^Adam/update_encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/ResourceApplyAdam"
}
node {
  name: "Adam/value"
  op: "Const"
  input: "^Adam/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "Adam"
  op: "AssignAdd"
  input: "global_step"
  input: "Adam/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam/Assign"
  input: "^decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1/Assign"
  input: "^decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Assign"
  input: "^decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam/Assign"
  input: "^decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1/Assign"
  input: "^decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Assign"
  input: "^decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam/Assign"
  input: "^decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1/Assign"
  input: "^decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Assign"
  input: "^decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam/Assign"
  input: "^decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1/Assign"
  input: "^decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Assign"
  input: "^decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam/Assign"
  input: "^decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1/Assign"
  input: "^decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Assign"
  input: "^decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam/Assign"
  input: "^decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1/Assign"
  input: "^decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Assign"
  input: "^dense/bias/Adam/Assign"
  input: "^dense/bias/Adam_1/Assign"
  input: "^dense/bias/Assign"
  input: "^dense/kernel/Adam/Assign"
  input: "^dense/kernel/Adam_1/Assign"
  input: "^dense/kernel/Assign"
  input: "^embedding/Adam/Assign"
  input: "^embedding/Adam_1/Assign"
  input: "^embedding/Assign"
  input: "^encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam/Assign"
  input: "^encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1/Assign"
  input: "^encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Assign"
  input: "^encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam/Assign"
  input: "^encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1/Assign"
  input: "^encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Assign"
  input: "^encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam/Assign"
  input: "^encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1/Assign"
  input: "^encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Assign"
  input: "^encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam/Assign"
  input: "^encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1/Assign"
  input: "^encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Assign"
  input: "^encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam/Assign"
  input: "^encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1/Assign"
  input: "^encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Assign"
  input: "^encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam/Assign"
  input: "^encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1/Assign"
  input: "^encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Assign"
  input: "^global_step/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "embedding"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dense/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dense/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "embedding/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "embedding/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_22"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_23"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_24"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_25"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_26"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_27"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_28"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_29"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_30"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_31"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_32"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_33"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_34"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_35"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_36"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_37"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dense/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dense/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dense/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "dense/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "accOp/total"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accOp/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "accOp/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accOp/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  input: "report_uninitialized_variables/VarIsInitializedOp_6"
  input: "report_uninitialized_variables/VarIsInitializedOp_7"
  input: "report_uninitialized_variables/VarIsInitializedOp_8"
  input: "report_uninitialized_variables/VarIsInitializedOp_9"
  input: "report_uninitialized_variables/VarIsInitializedOp_10"
  input: "report_uninitialized_variables/VarIsInitializedOp_11"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/VarIsInitializedOp_12"
  input: "report_uninitialized_variables/VarIsInitializedOp_13"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/VarIsInitializedOp_14"
  input: "report_uninitialized_variables/VarIsInitializedOp_15"
  input: "report_uninitialized_variables/VarIsInitializedOp_16"
  input: "report_uninitialized_variables/VarIsInitializedOp_17"
  input: "report_uninitialized_variables/VarIsInitializedOp_18"
  input: "report_uninitialized_variables/VarIsInitializedOp_19"
  input: "report_uninitialized_variables/VarIsInitializedOp_20"
  input: "report_uninitialized_variables/VarIsInitializedOp_21"
  input: "report_uninitialized_variables/VarIsInitializedOp_22"
  input: "report_uninitialized_variables/VarIsInitializedOp_23"
  input: "report_uninitialized_variables/VarIsInitializedOp_24"
  input: "report_uninitialized_variables/VarIsInitializedOp_25"
  input: "report_uninitialized_variables/VarIsInitializedOp_26"
  input: "report_uninitialized_variables/VarIsInitializedOp_27"
  input: "report_uninitialized_variables/VarIsInitializedOp_28"
  input: "report_uninitialized_variables/VarIsInitializedOp_29"
  input: "report_uninitialized_variables/VarIsInitializedOp_30"
  input: "report_uninitialized_variables/VarIsInitializedOp_31"
  input: "report_uninitialized_variables/VarIsInitializedOp_32"
  input: "report_uninitialized_variables/VarIsInitializedOp_33"
  input: "report_uninitialized_variables/VarIsInitializedOp_34"
  input: "report_uninitialized_variables/VarIsInitializedOp_35"
  input: "report_uninitialized_variables/VarIsInitializedOp_36"
  input: "report_uninitialized_variables/VarIsInitializedOp_37"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 50
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 50
          }
        }
        string_val: "global_step"
        string_val: "embedding"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
        string_val: "dense/kernel"
        string_val: "dense/bias"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "embedding/Adam"
        string_val: "embedding/Adam_1"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
        string_val: "dense/kernel/Adam"
        string_val: "dense/kernel/Adam_1"
        string_val: "dense/bias/Adam"
        string_val: "dense/bias/Adam_1"
        string_val: "accOp/total"
        string_val: "accOp/count"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 50
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 50
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 50
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "embedding"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dense/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dense/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "embedding/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "embedding/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_22"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_23"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_24"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_25"
  op: "VarIsInitializedOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_26"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_27"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_28"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_29"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_30"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_31"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_32"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_33"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_34"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_35"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_36"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_37"
  op: "VarIsInitializedOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dense/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dense/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dense/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "dense/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_22"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_23"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_24"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_25"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_26"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_27"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_28"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_29"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_30"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_31"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_32"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_33"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_34"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_35"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_36"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_37"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 48
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 48
          }
        }
        string_val: "global_step"
        string_val: "embedding"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
        string_val: "dense/kernel"
        string_val: "dense/bias"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "embedding/Adam"
        string_val: "embedding/Adam_1"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
        string_val: "dense/kernel/Adam"
        string_val: "dense/kernel/Adam_1"
        string_val: "dense/bias/Adam"
        string_val: "dense/bias/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
  input: "^accOp/count/Assign"
  input: "^accOp/total/Assign"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "accuracy"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_8b3ee1cd6faa44bc954cf5b976379a42/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 48
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
        string_val: "dense/bias"
        string_val: "dense/bias/Adam"
        string_val: "dense/bias/Adam_1"
        string_val: "dense/kernel"
        string_val: "dense/kernel/Adam"
        string_val: "dense/kernel/Adam_1"
        string_val: "embedding"
        string_val: "embedding/Adam"
        string_val: "embedding/Adam_1"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 48
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "beta1_power/Read/ReadVariableOp"
  input: "beta2_power/Read/ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Read/ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam/Read/ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1/Read/ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Read/ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam/Read/ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1/Read/ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Read/ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam/Read/ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1/Read/ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Read/ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam/Read/ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1/Read/ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Read/ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam/Read/ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1/Read/ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Read/ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam/Read/ReadVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1/Read/ReadVariableOp"
  input: "dense/bias"
  input: "dense/bias/Adam"
  input: "dense/bias/Adam_1"
  input: "dense/kernel"
  input: "dense/kernel/Adam"
  input: "dense/kernel/Adam_1"
  input: "embedding"
  input: "embedding/Adam"
  input: "embedding/Adam_1"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Read/ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam/Read/ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1/Read/ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Read/ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam/Read/ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1/Read/ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Read/ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam/Read/ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1/Read/ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Read/ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam/Read/ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1/Read/ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Read/ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam/Read/ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1/Read/ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Read/ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam/Read/ReadVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1/Read/ReadVariableOp"
  input: "global_step"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 48
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
        string_val: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
        string_val: "dense/bias"
        string_val: "dense/bias/Adam"
        string_val: "dense/bias/Adam_1"
        string_val: "dense/kernel"
        string_val: "dense/kernel/Adam"
        string_val: "dense/kernel/Adam_1"
        string_val: "embedding"
        string_val: "embedding/Adam"
        string_val: "embedding/Adam_1"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
        string_val: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 48
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "beta1_power"
  input: "save/Identity_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "beta2_power"
  input: "save/Identity_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
  input: "save/Identity_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
  input: "save/Identity_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
  input: "save/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
  input: "save/Identity_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
  input: "save/Identity_7"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
  input: "save/Identity_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
  input: "save/Identity_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
  input: "save/Identity_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
  input: "save/Identity_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
  input: "save/Identity_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
  input: "save/Identity_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
  input: "save/Identity_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
  input: "save/Identity_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_15"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
  input: "save/Identity_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_16"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
  input: "save/Identity_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_17"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
  input: "save/Identity_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_18"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
  input: "save/Identity_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_19"
  op: "AssignVariableOp"
  input: "decoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
  input: "save/Identity_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "dense/bias"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "dense/bias/Adam"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "dense/bias/Adam_1"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "dense/kernel"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "dense/kernel/Adam"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "dense/kernel/Adam_1"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 122
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "embedding"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "embedding/Adam"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "embedding/Adam_1"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 122
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_20"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias"
  input: "save/Identity_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_21"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam"
  input: "save/Identity_22"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_23"
  op: "Identity"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_22"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/bias/Adam_1"
  input: "save/Identity_23"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_24"
  op: "Identity"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_23"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel"
  input: "save/Identity_24"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_25"
  op: "Identity"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_24"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam"
  input: "save/Identity_25"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_26"
  op: "Identity"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_25"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_0/lstm0/kernel/Adam_1"
  input: "save/Identity_26"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_27"
  op: "Identity"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_26"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias"
  input: "save/Identity_27"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_28"
  op: "Identity"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_27"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam"
  input: "save/Identity_28"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_29"
  op: "Identity"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_28"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/bias/Adam_1"
  input: "save/Identity_29"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_30"
  op: "Identity"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_29"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel"
  input: "save/Identity_30"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_31"
  op: "Identity"
  input: "save/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_30"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam"
  input: "save/Identity_31"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_32"
  op: "Identity"
  input: "save/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_31"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_1/lstm1/kernel/Adam_1"
  input: "save/Identity_32"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_33"
  op: "Identity"
  input: "save/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_32"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias"
  input: "save/Identity_33"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_34"
  op: "Identity"
  input: "save/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_33"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam"
  input: "save/Identity_34"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_35"
  op: "Identity"
  input: "save/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_34"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/bias/Adam_1"
  input: "save/Identity_35"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_36"
  op: "Identity"
  input: "save/RestoreV2:44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_35"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel"
  input: "save/Identity_36"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_37"
  op: "Identity"
  input: "save/RestoreV2:45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_36"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam"
  input: "save/Identity_37"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_38"
  op: "Identity"
  input: "save/RestoreV2:46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_37"
  op: "AssignVariableOp"
  input: "encoder_scope/rnn/multi_rnn_cell/cell_2/lstm2/kernel/Adam_1"
  input: "save/Identity_38"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:47"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_10"
  input: "^save/AssignVariableOp_11"
  input: "^save/AssignVariableOp_12"
  input: "^save/AssignVariableOp_13"
  input: "^save/AssignVariableOp_14"
  input: "^save/AssignVariableOp_15"
  input: "^save/AssignVariableOp_16"
  input: "^save/AssignVariableOp_17"
  input: "^save/AssignVariableOp_18"
  input: "^save/AssignVariableOp_19"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_20"
  input: "^save/AssignVariableOp_21"
  input: "^save/AssignVariableOp_22"
  input: "^save/AssignVariableOp_23"
  input: "^save/AssignVariableOp_24"
  input: "^save/AssignVariableOp_25"
  input: "^save/AssignVariableOp_26"
  input: "^save/AssignVariableOp_27"
  input: "^save/AssignVariableOp_28"
  input: "^save/AssignVariableOp_29"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_30"
  input: "^save/AssignVariableOp_31"
  input: "^save/AssignVariableOp_32"
  input: "^save/AssignVariableOp_33"
  input: "^save/AssignVariableOp_34"
  input: "^save/AssignVariableOp_35"
  input: "^save/AssignVariableOp_36"
  input: "^save/AssignVariableOp_37"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_5"
  input: "^save/AssignVariableOp_6"
  input: "^save/AssignVariableOp_7"
  input: "^save/AssignVariableOp_8"
  input: "^save/AssignVariableOp_9"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "Dataset_map_rearrange_1443"
      input_arg {
        name: "arg0_0"
        type: DT_INT32
      }
      input_arg {
        name: "arg1_0"
        type: DT_INT32
      }
      input_arg {
        name: "arg2_0"
        type: DT_INT32
      }
      output_arg {
        name: "arg0"
        type: DT_INT32
      }
      output_arg {
        name: "arg1"
        type: DT_INT32
      }
      output_arg {
        name: "arg2"
        type: DT_INT32
      }
      description: "Wrapper for passing nested structures to and from tf.data functions."
    }
    ret {
      key: "arg0"
      value: "arg0_0"
    }
    ret {
      key: "arg1"
      value: "arg1_0"
    }
    ret {
      key: "arg2"
      value: "arg2_0"
    }
  }
  function {
    signature {
      name: "_make_dataset_IvTZ5sHoH44"
      output_arg {
        name: "modeldataset"
        type: DT_VARIANT
      }
      description: "Factory function for a dataset."
      is_stateful: true
    }
    node_def {
      name: "optimizations"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 3
              }
            }
            string_val: "map_and_batch_fusion"
            string_val: "noop_elimination"
            string_val: "shuffle_and_repeat_fusion"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_0"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 13
              }
              dim {
                size: 25
              }
            }
            tensor_content: "k\000\000\000V\000\000\000(\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000L\000\000\000O\000\000\000.\000\000\000j\000\000\000\033\000\000\000o\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000L\000\000\000\020\000\000\000hx\000\000\000m\000\000\000\006\000\000\000\034\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000L\000\000\000%\000\000\000l\000\000\000U\000\000\000E\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000P\000\000\000t\000\000\000yq\000\000\000Z\000\000\0008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000P\000\000\000t\000\000\000/\000\000\000i\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_1"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 13
              }
              dim {
                size: 25
              }
            }
            tensor_content: "\001\000\000\0005\000\000\000\016\000\000\000\027\000\000\0000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\013\000\000\000M\000\000\000f\000\000\000vac\000\000\000D\000\000\000p\000\000\000d\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000m\000\000\000M\000\000\000!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000<\000\000\000\024\000\000\000w\000\000\000\025\000\000\000v`\000\000\000M\000\000\000\'\000\000\000T\000\000\000+\000\000\000R\000\000\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\031\000\000\000\024\000\000\000c\000\000\000D\000\000\000p\000\000\000d
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_2"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 13
              }
              dim {
                size: 25
              }
            }
            tensor_content: "5\000\000\000\016\000\000\000\027\000\000\0000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\000\000\000M\000\000\000f\000\000\000vac\000\000\000D\000\000\000p\000\000\000d\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000m\000\000\000M\000\000\000!\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000<\000\000\000\024\000\000\000w\000\000\000\025\000\000\000v`\000\000\000M\000\000\000\'\000\000\000T\000\000\000+\000\000\000R\000\000\000v\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\000\000\000\024\000\000\000c\000\000\000D\000\000\000p\000\000\000d
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "TensorSliceDataset/tensors/component_0:output:0"
      input: "TensorSliceDataset/tensors/component_1:output:0"
      input: "TensorSliceDataset/tensors/component_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 25
              }
            }
            shape {
              dim {
                size: 25
              }
            }
            shape {
              dim {
                size: 25
              }
            }
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/buffer_size"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 13
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/seed"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/seed2"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset"
      op: "ShuffleDataset"
      input: "TensorSliceDataset:handle:0"
      input: "ShuffleDataset/buffer_size:output:0"
      input: "ShuffleDataset/seed:output:0"
      input: "ShuffleDataset/seed2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 25
              }
            }
            shape {
              dim {
                size: 25
              }
            }
            shape {
              dim {
                size: 25
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
          }
        }
      }
      attr {
        key: "reshuffle_each_iteration"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "BatchDatasetV2/batch_size"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 64
          }
        }
      }
    }
    node_def {
      name: "BatchDatasetV2/drop_remainder"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: false
          }
        }
      }
    }
    node_def {
      name: "BatchDatasetV2"
      op: "BatchDatasetV2"
      input: "ShuffleDataset:handle:0"
      input: "BatchDatasetV2/batch_size:output:0"
      input: "BatchDatasetV2/drop_remainder:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 25
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 25
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 25
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
          }
        }
      }
    }
    node_def {
      name: "MapDataset"
      op: "MapDataset"
      input: "BatchDatasetV2:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "Dataset_map_rearrange_1443"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 25
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 25
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 25
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
          }
        }
      }
      attr {
        key: "preserve_cardinality"
        value {
          b: false
        }
      }
      attr {
        key: "use_inter_op_parallelism"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "RepeatDataset/count"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "RepeatDataset"
      op: "RepeatDataset"
      input: "MapDataset:handle:0"
      input: "RepeatDataset/count:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 25
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 25
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 25
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset"
      op: "OptimizeDataset"
      input: "RepeatDataset:handle:0"
      input: "optimizations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 25
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 25
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 25
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
          }
        }
      }
    }
    node_def {
      name: "ModelDataset"
      op: "ModelDataset"
      input: "OptimizeDataset:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 25
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 25
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 25
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
          }
        }
      }
    }
    ret {
      key: "modeldataset"
      value: "ModelDataset:handle:0"
    }
  }
}
versions {
  producer: 27
  min_consumer: 12
}
